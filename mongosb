#!/usr/bin/python

# mongosb - MongoDB Sandbox - Create, destroy, experiment, learn MongoDB - quickly!
#
# @author Jervin Real <jervin.real@percona.com>

import sys, os
import time, calendar, shutil, re, pwd
from datetime import datetime
from optparse import OptionParser
from subprocess import Popen, PIPE, STDOUT, CalledProcessError

MONGOSB_VERSION = 0.1
MONGOSB__X_DIE  = 255

"""
Utility functions
"""

msb_exit_code = 0

def out(tag, *msgs):
    s = ''

    if not msgs:
        return

    for msg in msgs:
        s += str(msg)

    out = "[%s] %s: %s" % (date(time.time()), tag, s)
    print out

def say(*msgs):
    out('INFO', *msgs)

def warn(*msgs):
    out('WARN', *msgs)

def error(*msgs):
    out('ERROR', *msgs)

def die(*msgs):
    out('FATAL', *msgs)
    if not msb_exit_code: exit_code(MONGOSB__X_DIE)
    raise Exception(str(msgs))

def debug(*msgs):
    out("** DEBUG **", *msgs)

def which(file):
    for path in os.environ["PATH"].split(os.pathsep):
        if os.path.exists(path + os.path.sep + file):
                return path + os.path.sep + file

    return None

def exit_code(code):
    global msb_exit_code

    c = int(code)
    if c > msb_exit_code: msb_exit_code = c

def date(unixtime, format = '%m/%d/%Y %H:%M:%S'):
    d = datetime.fromtimestamp(unixtime)
    return d.strftime(format)

class MongoServer(object):
    def __init__(self, relpath):
        self.tar_path = None
        self.bin_path = None
        self.mongod = None

        if os.path.isdir(relpath):
            self.bin_path = os.path.join(relpath.rstrip('/'),'bin')
        elif os.environ.get('MONGOSB_BINARIES'):
            self.bin_path = os.path.join(
                os.environ.get('MONGOSB_BINARIES').rstrip('/'), relpath, 'bin')
        else:
            die("Specified mongodb package/release is not valid")

        debug("bin_path: %s" % self.bin_path)
        self.mongod = os.path.join(self.bin_path,'mongod')

        if not os.path.isdir(self.bin_path):
            die("Release directory %s is not valid" % self.bin_path)
        elif not os.path.isfile(self.mongod):
            die("The mongod binary %s does not exist" % self.mongod)

    def start(self, opts):
        cmd = self.mongod

        if len(opts):
            for o, v in opts.iteritems():
                cmd = "%s --%s=%s" % (cmd, o, v)

        Popen(cmd, shell=True, close_fds=True)

class MongoFactory(object):
    
    def __init__(self):
        self.sandbox_dir = None
        self.bin_path = None
        self.ports_list = [27017]
        self.cmd = None
        self.opts = None
        self.parser = None

        self.parse_options()

        cmd = getattr(self, "run_%s" % self.cmd, lambda: "nothing")
        return cmd()

    def parse_options(self):
        p_usage = "Usage: %prog [options] create|destroy [-- mongodb options]"
        p_desc = ("MongoDB Sandbox - Create, destroy, experiment, "
            "learn MongoDB - quickly!")

        parser = OptionParser(p_usage, version="%prog " + str(MONGOSB_VERSION),
            description=p_desc)
        parser.add_option('', '--base-port', dest='base_port', type='string',
            help='Custom port (can be range in form "min,max")')
        parser.add_option('', '--sandbox-dir', dest='sandbox_dir', type='string',
            help='Sandbox directory for mongodb instance(s)')
        parser.add_option('', '--release', dest='release', type='string',
            help=('MongoDB version to run, can be a path to a package, \n'
                'path to folder with binaries, or basename inside \n' 
                'MONGOSB_BINARIES environment variable'))

        (opts, args) = parser.parse_args()

        if opts.sandbox_dir:
            self.sandbox_dir = opts.sandbox_dir
        elif os.environ.get('MONGOSB_HOME'):
            self.sandbox_dir = os.environ.get('MONGOSB_HOME')

        if not self.sandbox_dir:
            parser.error("No dbpath specified or MONGOSB_HOME env not set")
        elif not os.path.isdir(self.sandbox_dir):
            parser.error("Base dbpath is not a valid directory")

        if opts.base_port: 
            self.ports_list = self.parse_port(opts.base_port)

        cmds = ['create', 'destroy']
        if len(args) >= 1 and args[0] not in cmds:
            parser.error("Command not recognized, got '%s'")
        elif len(args) <= 0:
            parser.error("Command not specified")
        else:
            self.cmd = args[0]

        self.parser = parser
        self.opts = opts

    def parse_port(self, param):
        """
        Parses and assign given port range values 
        i.e.
        param = 27017
        param = 27017,27018

        TODO: This should throw an exception if param is not valid
        """

        pmin = 27017
        pmax = 27017
        t = 27017

        if not param: return pmin

        if param.isdigit():
            return pmin
        elif param.count(',') == 1:
            pmin, pmax = param.split(',')
            pmin = pmin.strip()
            pmax = pmax.strip()
            
            if not pmin.isdigit() or not pmax.isdigit(): 
                raise
            
            pmin = int(pmin)
            pmax = int(pmax)
            
            if pmin == pmax:
                return pmin
            elif pmin > pmax:
                t = pmin
                pmin = pmax
                pmax = t
            
            return range(pmin, pmax+1)

        else:
            raise

        return pmin

    def run_create(self):
        if not self.opts.release:
            self.parser.error("MongoDB release/package is required")

        self.bin = MongoServer(self.opts.release)
        for port in self.ports_list:
            self.sandbox_dir = "%s/mngo_%s" % (self.sandbox_dir, self.opts.release)
            if not os.path.isdir(self.sandbox_dir):
                os.mkdir(self.sandbox_dir, 0755)

            opts = dict()
            opts['port'] = port
            opts['dbpath'] = self.sandbox_dir
            self.bin.start(opts)

        say("Running create sandbox")

    def run_destroy(self):
        say("Running destroy sandbox")

if __name__ == "__main__":
    mongosb = MongoFactory()