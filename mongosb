#!/usr/bin/python

# mongosb - MongoDB Sandbox - Create, destroy, experiment, learn MongoDB - quickly!
#
# @author Jervin Real <jervin.real@percona.com>

import sys, os, collections
import time, calendar, shutil, re, pwd
from datetime import datetime
from optparse import OptionParser
from subprocess import Popen, PIPE, STDOUT, CalledProcessError

MONGOSB_VERSION = 0.1
MONGOSB_DEBUG   = False
MONGOSB__X_DIE  = 255

"""
Utility functions
"""

msb_exit_code = 0

def out(tag, *msgs):
    s = ''

    if not msgs:
        return

    for msg in msgs:
        s += str(msg)

    out = "[%s] %s: %s" % (date(time.time()), tag, s)
    print out

def say(*msgs):
    out('INFO', *msgs)

def warn(*msgs):
    out('WARN', *msgs)

def error(*msgs):
    out('ERROR', *msgs)

def die(*msgs):
    out('FATAL', *msgs)
    if not msb_exit_code: exit_code(MONGOSB__X_DIE)
    raise Exception(str(msgs))

def debug(*msgs):
    out("** DEBUG **", *msgs)

def which(file):
    for path in os.environ["PATH"].split(os.pathsep):
        if os.path.exists(path + os.path.sep + file):
                return path + os.path.sep + file

    return None

def exit_code(code):
    global msb_exit_code

    c = int(code)
    if c > msb_exit_code: msb_exit_code = c

def date(unixtime, format = '%m/%d/%Y %H:%M:%S'):
    d = datetime.fromtimestamp(unixtime)
    return d.strftime(format)

def run(cmd):
    p = Popen(cmd, shell=True)
    r = p.poll()
    while r is None:
        time.sleep(2)
        r = p.poll()

    if r != 0: return False

    return True

class MongoConfig(object):
    def __init__(self, args):
        self.vals = {} 

        for i in range(1, len(args)):
            k, v = args[i].split('=')
            self.set(k, v)

    def set(self, keys, value):
        keys = keys.split(".")
        for k in keys[:-1]:
            if not k in self.vals: self.vals[k] = {}
            self.vals = self.vals[k]            
        self.vals[keys[-1]] = value

    def get(self, keys):
        keys = keys.split(".")
        for k in keys[:-1]:
            if not k in self.vals: self.vals[k] = {}
            self.vals = self.vals[k]            
        self.vals[keys[-1]] = value
        

class MongoServer(object):
    def __init__(self):
        self.opts = None
        self.bin_path = None
        self.mongod = None
        self.conf = None
        self.bash = which('bash')

    def start(self, dbpath):
        cmd = "%s %s/start" % (self.bash, dbpath)
        return run(cmd)

    def stop(self, dbpath):
        cmd = "%s %s/stop" % (self.bash, dbpath)
        return run(cmd)

    def cleanup_instance(self, dbpath):
        say("Destroy of instance %s" % dbpath)

        if not self.stop(dbpath):
            die("Instance at %s failed to stop" % dbpath)

        shutil.rmtree(dbpath)
        return True

    def init_instance(self, opts, conf):
        self.opts = opts
        self.conf = conf
        conf = "%s/mongod.conf" % self.conf['storage']['dbPath']

        if os.path.isdir(opts.release):
            self.bin_path = os.path.join(opts.release.rstrip('/'),'bin')
        elif os.environ.get('MONGOSB_BINARIES'):
            self.bin_path = os.path.join(
                os.environ.get('MONGOSB_BINARIES').rstrip('/'), opts.release, 'bin')
        else:
            die("Specified mongodb package/release is not valid")

        self.mongod = os.path.join(self.bin_path,'mongod')

        if not os.path.isdir(self.bin_path):
            die("Release directory %s is not valid" % self.bin_path)
        elif not os.path.isfile(self.mongod):
            die("The mongod binary %s does not exist" % self.mongod)

        header = "#!%s\n" % which('bash')
        cmd = "%s/mongod --config=%s" % (self.bin_path, conf)
        f = os.path.join(self.conf['storage']['dbPath'], 'start')
        fd = open(f, 'w')
        fd.write(header)
        fd.write(cmd)
        fd.close()
        os.chmod(f, 0755)

        cmd = "%s --shutdown" % cmd
        f = os.path.join(self.conf['storage']['dbPath'], 'stop')
        fd = open(f, 'w')
        fd.write(header)
        fd.write(cmd)
        fd.close()
        os.chmod(f, 0755)

        cmd = "%s/mongo --host=%s --port=%d" % (
            self.bin_path, '127.0.0.1', self.conf['net']['port'])
        f = os.path.join(self.conf['storage']['dbPath'], 'use')
        fd = open(f, 'w')
        fd.write(header)
        fd.write(cmd)
        fd.close()
        os.chmod(f, 0755)

        if not os.path.isfile(conf):
            self.write_config()

        return True

    def write_config(self):
        conf = "%s/mongod.conf" % self.conf['storage']['dbPath']
        f = open(conf, 'w')
        f.write(self.dict_to_yaml(self.conf))
        f.close()

    def dict_to_yaml(self, s, sep="\n"):
        """
        We use this instead of pyyaml, single function vs extra description
        """
        yaml_s = ""
        for k, v in s.iteritems():
            if isinstance(v, collections.Mapping):
                yaml_s = "%s%s%s:%s" % (
                    yaml_s, sep, k, self.dict_to_yaml(v, sep + "  "))
            else:
                yaml_s = "%s%s%s: %s" % (yaml_s, sep, k ,v)
        return yaml_s

class MongoFactory(object):
    
    def __init__(self):
        self.base_dir = None
        self.bin_path = None
        self.ports_list = [27017]
        self.cmd = None
        self.opts = None
        self.args = None
        self.parser = None
        self.conf = {}

        self.parse_options()

        cmd = getattr(self, "run_%s" % self.cmd, lambda: "nothing")
        return cmd()

    def parse_options(self):
        p_usage = "Usage: %prog [options] create|destroy [-- mongodb options]"
        p_desc = ("MongoDB Sandbox - Create, destroy, experiment, "
            "learn MongoDB - quickly!")

        parser = OptionParser(p_usage, version="%prog " + str(MONGOSB_VERSION),
            description=p_desc)
        parser.add_option('', '--base-port', dest='base_port', type='string',
            help='Custom port (can be range in form "min,max")')
        parser.add_option('', '--base-dir', dest='base_dir', type='string',
            help=('Sandbox directory for mongodb instance(s) \n'
                'Can also be defined as env variable MONGOSB_HOME'))
        parser.add_option('', '--sandbox', dest='sandbox', type='string',
            help='Used with destroy, full path to sandbox directory')
        parser.add_option('', '--release', dest='release', type='string',
            help=('MongoDB version to run, can be a path to a package, \n'
                'path to folder with binaries, or basename inside \n' 
                'MONGOSB_BINARIES environment variable'))

        (opts, args) = parser.parse_args()

        if opts.base_dir:
            self.base_dir = opts.base_dir
        elif os.environ.get('MONGOSB_HOME'):
            self.base_dir = os.environ.get('MONGOSB_HOME')

        if not self.base_dir:
            parser.error("No dbpath specified or MONGOSB_HOME env not set")
        elif not os.path.isdir(self.base_dir):
            parser.error("Base dbpath is not a valid directory")

        if opts.base_port: 
            self.ports_list = self.parse_port(opts.base_port)

        cmds = ['create', 'destroy']
        if len(args) >= 1 and args[0] not in cmds:
            parser.error("Command not recognized, got '%s'")
        elif len(args) <= 0:
            parser.error("Command not specified")
        else:
            self.cmd = args[0]

        self.parser = parser
        self.opts = opts
        self.args = args
        self.parse_extras()

    def parse_port(self, param):
        """
        Parses and assign given port range values 
        i.e.
        param = 27017
        param = 27017,27018

        TODO: This should throw an exception if param is not valid
        """

        pmin = 27017
        pmax = 27017
        t = 27017

        if not param: return pmin

        if param.isdigit():
            return pmin
        elif param.count(',') == 1:
            pmin, pmax = param.split(',')
            pmin = pmin.strip()
            pmax = pmax.strip()
            
            if not pmin.isdigit() or not pmax.isdigit(): 
                raise
            
            pmin = int(pmin)
            pmax = int(pmax)
            
            if pmin == pmax:
                return pmin
            elif pmin > pmax:
                t = pmin
                pmin = pmax
                pmax = t
            
            return range(pmin, pmax+1)

        else:
            raise

        return pmin

    def parse_extras(self):
        for i in range(1, len(self.args)):
            k, v = self.args[i].split('=')
            self.append_conf(k, v)

        say(self.conf)

    def merge_conf(self, d1, d2):
        for k,v2 in d2.items():
            v1 = d1.get(k) # returns None if v1 has no value for this key
            if ( isinstance(v1, collections.Mapping) and 
                 isinstance(v2, collections.Mapping) ):
                self.merge_conf(v1, v2)
            else:
                d1[k] = v2

        return d1

    def append_conf(self, dotted_k, v):
        d = self.parse_dotted(dotted_k, v)
        k, v = d.popitem()
        if k not in self.conf:
            self.conf[k] = v
        else:
            n = self.merge_conf(v, self.conf[k])
            self.conf[k] = n

    def parse_dotted(self, keys, value, d=None):
        if d is None: d = {}
        if "." in keys:
            key, rest = keys.split(".", 1)
            if key not in d:
                d[key] = {}
            self.parse_dotted(rest, value, d[key])
        else:
            d[keys] = value
        
        return d

    def run_create(self):
        if not self.opts.release:
            self.parser.error("MongoDB release/package is required")

        self.bin = MongoServer()
        for port in self.ports_list:
            dbpath = "%s/mngo_%s" % (self.base_dir, self.opts.release)
            if not os.path.isdir(dbpath):
                os.mkdir(dbpath, 0755)

            self.append_conf('net.port', port)
            self.append_conf('storage.dbPath', dbpath)
            self.append_conf('net.unixDomainSocket.pathPrefix', dbpath)
            self.append_conf(
                'processManagement.pidFilePath', "%s/mongodb.pid" % dbpath)
            self.append_conf('processManagement.fork', 'true')
            self.append_conf('net.unixDomainSocket.pathPrefix', dbpath)
            self.append_conf('systemLog.destination', 'file')
            self.append_conf('systemLog.path', "%s/mongodb.log" % dbpath)

            #say(self.conf)
            #sys.exit(0)

            self.bin.init_instance(self.opts, self.conf)
            self.bin.start(dbpath)

    def run_destroy(self):
        if not os.path.isdir(self.opts.sandbox):
            self.parser.error("The specified sandbox directory is not valid")

        self.bin = MongoServer()
        self.bin.cleanup_instance(self.opts.sandbox)

if __name__ == "__main__":
    mongosb = MongoFactory()